import keras
#import tensorflow as tf
from keras.datasets import cifar10
from keras.layers import Activation, Conv2D, Dense, Dropout, Flatten,Maxpooling2D
from keras.models import Sequential, load_model
from keras.utils.np_utils import to_categorical
import numpy as np 
import matplotlib.pyplot as plt
%matplotlib inline

#データをロード
(X_train, y_train),(X_test, y_test) = cifar10.load_data()

#全データの内、学習に３００枚、テストに１００枚のデータを使用
X_train = X_train[:300]
X_test = X_test[:100]
y_train = to_categorical(y_train)[:300]
y_test = to_categorical(y_test)[:100]

#モデル定義
model = Sequential()
model.add(Conv2D(32,(3,3),padding="same",input_shape=X_train.shape[:1]))
model.add(Activation("relu"))
model.add(Conv2D(32,(3,3)))
model.add(Activation("relu"))
model.add(MaxPooling2D(pool_size=(2,2)))
model.add(Dropout(0.25))

model.add(Conv2D(64,(3,3),padding="same"))
model.add(Activation("relu"))
model.add(Conv2D(64,(3,3)))
model.add(Activation("relu"))
model.add(MaxPooling2D(pool_size=(2,2)))
model.add(Dropout(0.25))

model.add(Flatten())
model.add(Dense(512))
model.add(Activation("relu"))
model.add(Dropout(0.5))
model.add(Dense(10))
model.add(Activation("softmax"))

#コンパイル
opt = keras.optimizer.rmsprop(lr=0.0001, decay=1e-6)
model.compile(loss="categorical_crossentropy",optimizer=opt, metrics=["accuracy"])

#学習
model.fit(X_train, y_train, batch_size=96, epochs=5, verbose=1)
plt.show(model)
#重みの保存
model.save_weights("param_cifar10.hdf5")
#精度評価
scores = model.evaluate(X_test, y_test, verbose=1)
print("Test loss;",scores[0])
print("Test accuracy:",scores[1])
#データを可視化
'''
for i in range(10):
    plt.subplot(2,5,i+1)
    plt.imshow(X_test[i])
plt.suptitle("The first ten of the test data",fontsize=20)
plt.show()
'''
pred = np.argmax(model.predict(X_test[0:10]),axis=1)
print(pred)

model.summary()
